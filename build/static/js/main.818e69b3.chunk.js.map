{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","flipped","set","useSpring","opacity","transform","config","mass","tension","friction","onClick","state","div","className","style","interpolate","o","t","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNA+BeA,MA3Bf,WAAgB,IAAD,EACUC,oBAAS,GADnB,mBACNC,EADM,KACGC,EADH,OAEgBC,YAAU,CACrCC,QAASH,EAAU,EAAI,EACvBI,UAAU,8BAAD,OAAgCJ,EAAU,IAAM,EAAhD,QACTK,OAAQ,CAACC,KAAM,EAAGC,QAAS,IAAKC,SAAU,MAHrCJ,EAFM,EAENA,UAAWD,EAFL,EAEKA,QAKlB,OACE,sBAAKM,QAAS,kBAAMR,GAAI,SAACS,GAAD,OAAYA,MAApC,UACE,cAAC,IAAEC,IAAH,CACEC,UAAU,SACVC,MAAO,CACLV,QAASA,EAAQW,aAAY,SAACC,GAAD,OAAa,EAAIA,KAC9CX,eAGJ,cAAC,IAAEO,IAAH,CACEC,UAAU,UACVC,MAAO,CACLV,UACAC,UAAWA,EAAUU,aAAY,SAACE,GAAD,gBAAUA,EAAV,8BCV5BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.818e69b3.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport {useSpring, animated as a} from 'react-spring'\nimport './styles.css'\n\nfunction App() {\n  const [flipped, set] = useState(false)\n  const {transform, opacity} = useSpring({\n    opacity: flipped ? 1 : 0,\n    transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\n    config: {mass: 5, tension: 500, friction: 80},\n  })\n  return (\n    <div onClick={() => set((state) => !state)}>\n      <a.div\n        className=\"c back\"\n        style={{\n          opacity: opacity.interpolate((o: any) => (1 - o) as any),\n          transform,\n        }}\n      />\n      <a.div\n        className=\"c front\"\n        style={{\n          opacity,\n          transform: transform.interpolate((t) => `${t} rotateX(180deg)`),\n        }}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}